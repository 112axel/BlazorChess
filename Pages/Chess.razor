@page "/chess"
@using BlazorChess.Models;

<h3>Chess</h3>
<link type="text/css" href="~/css/chess.css"/>

<style>
    svg{
        border:solid black 2px;
    }

    .color1 {
        fill: white;
    }

    .color2 {
        fill: black;
    }

    .color3{
        fill: red;
    }

</style>



<svg width="90vh" height="90vh" viewBox="0 0 80 80">
    @for (int y = 0; y < boardY; y++)
    {
        @for (int x = 0; x < boardX; x++)
        {
            var x2 = x;
            var y2 = y;
            <rect x="@(x*sizeMultiply)" y="@(y*sizeMultiply)"
                  width="@sizeMultiply" height="@sizeMultiply"
                  class="@( new Func<string>(()=>{return TileClass(x,y);})() )"
                  onclick="@(()=> Move(x2,y2))">
            </rect>
            @if (game.GameBoard.Tiles[x, y].OccupyingPrice != null)
            {
                <image x="@(x*sizeMultiply)" y="@(y*sizeMultiply)" width="@sizeMultiply" height="@sizeMultiply"
                       href="@game.GameBoard.Tiles[x,y].OccupyingPrice.AssetPath"
                       onclick="@(() => ShowAllowedMoves(x2,y2))">
                </image>

            }
        }
    }
</svg>





@code {
    private static Game game = new Game();

    private static readonly int sizeMultiply = 10;

    private int boardX = game.GameBoard.Tiles.GetLength(0);
    private int boardY = game.GameBoard.Tiles.GetLength(1);

    private int movingPiceX = 0;
    private int movingPiceY = 0;


    private bool[,] highLightTile = new bool[game.GameBoard. Tiles.GetLength(0), game.GameBoard.Tiles.GetLength(1)];

    private void ShowAllowedMoves(int x, int y)
    {
        ClearHighlightTile();

        movingPiceX = x;
        movingPiceY = y;


        foreach (var move in game.GameBoard.Tiles[x, y].OccupyingPrice.AllowedMoves(game.GameBoard, x, y))
        {
            highLightTile[move.XDestination, move.YDestination] = true;
        }
        this.StateHasChanged();
    }

    private void ClearHighlightTile()
    {
        movingPiceX = -1;
        movingPiceY = -1;

        @for (int i = 0; i < boardX; i++)
        {
            for (int j = 0; j < boardY; j++)
            {
                highLightTile[i, j] = false;
            }
        }
    }


    private string TileClass(int x, int y)
    {
        if (highLightTile[x, y])
        {
            return "color3";
        }
        else
        {
            return (x + (y % 2 == 1 ? 1 : 0)) % 2 == 0 ? "color1" : "color2";
        }
    }
    //TODO maybe move somware else
    private void Move(int toX, int toY)
    {
        if (movingPiceX == -1 || movingPiceY == -1)
        {
            return;
        }
        game.Move(movingPiceX, movingPiceY, toX, toY);

        ClearHighlightTile();

        this.StateHasChanged();
    }
}
