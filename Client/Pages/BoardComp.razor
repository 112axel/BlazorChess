@using BlazorChess.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<h3>Chess</h3>
<link type="text/css" href="~/css/chess.css"/>

<style>
    svg{
        border:solid black 2px;
    }

    .color1 {
        fill: white;
    }

    .color2 {
        fill: black;
    }

    .color3{
        fill: red;
    }

</style>
<h1>id is @Game.Id</h1>
<p>@testValue</p>

<svg width="90vh" height="90vh" viewBox="0 0 100 100">
    @for (int y = 0; y < boardY; y++)
    {
        @for (int x = 0; x < boardX; x++)
        {
            var x2 = x;
            var y2 = y;
            var flippedX = x;
            var flippedY = y;
            if (isFlipped)
            {
                flippedX = boardX - 1 - x;
                flippedY = boardY - 1 - y;
            }

            <rect x="@(flippedX*sizeMultiply)" y="@(flippedY*sizeMultiply)"
                  width="@sizeMultiply" height="@sizeMultiply"
                  class="@( new Func<string>(()=>{return TileClass(x,y);})() )"
                  onclick="@(()=> HandleClick(x2,y2))">
            </rect>
            @if (Game.GameBoard.Tiles[x, y].OccupyingPrice != null)
            {
                <image x="@(flippedX*sizeMultiply)" y="@(flippedY*sizeMultiply)" width="@sizeMultiply" height="@sizeMultiply"
                       href="@Game.GameBoard.Tiles[x,y].OccupyingPrice.AssetPath"
                       onclick="@(() => HandleClick(x2,y2))">
                </image>
            }
        }
    }
</svg>
<label>
    Flipped
    <InputCheckbox @bind-Value="isFlipped" onchange="@StateHasChanged" />
</label>


@code {
    private bool isFlipped = false;
    private string testValue = "";
    [Parameter]
    public Game Game { get; set; }


    private HubConnection? hubConnection;

    private static double sizeMultiply { get; set; }

    private int movingPiceX = -1;
    private int movingPiceY = -1;

    private int boardX { get; set; }
    private int boardY { get; set; }
    //TODO add suport for more size
    private bool[,] highLightTile = new bool[8, 8];


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/BoardHub"))
        .WithAutomaticReconnect()
        .Build();

        boardX = Game.GameBoard.Tiles.GetLength(0);
        boardY = Game.GameBoard.Tiles.GetLength(1);

        sizeMultiply = 100.0 / boardX;

        hubConnection.On<string>("Test", (user) =>
        {
            testValue = user;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<HistoryMove>>("fullLoad", (moves) =>
        {
            Game.SetBaseState();

            foreach (var move in moves)
            {
                Game.Move(move);
            }
            ClearHighlightTile();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<HistoryMove>("Move", (move) =>
        {
            Game.Move(move);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetHistory", Game.Id);
    }



    private async Task SendMove(HistoryMove move)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("MakeMove", Game.Id, move);
        }
    }




    private void HandleClick(int x, int y)
    {
        var squareClicked = Game.GameBoard.Tiles[x, y];

        if (squareClicked.OccupyingPrice is not null)
        {
            if (squareClicked.OccupyingPrice.IsBlack == Game.IsBlackTurn)
            {
                ShowAllowedMoves(x, y);
            }
            else
            {
                Move(x, y);
            }
        }
        else
        {
            Move(x, y);
        }



    }

    private void ShowAllowedMoves(int x, int y)
    {
        ClearHighlightTile();

        movingPiceX = x;
        movingPiceY = y;


        foreach (var move in Game.GameBoard.Tiles[x, y].OccupyingPrice.AllowedMoves(Game.GameBoard, x, y))
        {
            highLightTile[move.XDestination, move.YDestination] = true;
        }
        this.StateHasChanged();
    }

    private void ClearHighlightTile()
    {
        movingPiceX = -1;
        movingPiceY = -1;

        @for (int i = 0; i < boardX; i++)
        {
            for (int j = 0; j < boardY; j++)
            {
                highLightTile[i, j] = false;
            }
        }
    }

    private string TileClass(int x, int y)
    {
        if (highLightTile[x, y])
        {
            return "color3";
        }
        else
        {
            return (x + (y % 2 == 1 ? 1 : 0)) % 2 == 0 ? "color1" : "color2";
        }
    }

    //TODO maybe move somware else
    private async void Move(int toX, int toY)

    {
        if (movingPiceX == -1 || movingPiceY == -1)
        {
            return;
        }
        if (Game.Move(movingPiceX, movingPiceY, toX, toY))
        {
            await SendMove(new HistoryMove(movingPiceX, movingPiceY, toX, toY));
        }

        ClearHighlightTile();

        this.StateHasChanged();
    }
}
